service: sc-service-v3

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: ap-northeast-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - yarn.lock
    - package.json
    - .npmignore

functions:
  api:
    handler: handler.graphql
    events:
      - http:
          path: graphql
          method: post
          cors: true
					integration: lambda
					response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "application/json"

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  serverless-offline:
    babelOptions:
      presets: ["es2015", "stage-2"]
    #corsAllowOrigin: 'http://localhost:8080'
    #corsAllowHeaders: 'Content-Type, Authorization, Allow-Origin'
	dynamodb:
    start:
      port: 8000
      migration: true
    migration:
      dir: migrations
